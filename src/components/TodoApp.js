import React, { useReducer, useState } from "react";
import { v4 as uuidv4 } from "uuid";
import Reducer from "./Reducer";
import { ADD_TODO, DELETE_TODO, UPDATE_TODO } from "./action.type";
import { connect } from "react-redux";

const initialState = []; // when our app render first time, it show initial state which we passed as empty

const TodoApp = () => {
  const [state, dispatch] = useReducer(Reducer, initialState);
  const [editedTask, setEditedTask] = useState();
  const [inputTodo, setInputTodo] = useState(""); // for getting input from user
  const [editedTaskId, setEditedTaskId] = useState(null); // only use when we update value

  const ID = uuidv4(); // uses third party library for unique Id (recommended for unique ID)

  const handleAddTask = (todo) => {
    dispatch({
      type: ADD_TODO,
      payload: {
        id: ID, // put id which generated by uuid
        todo: inputTodo, // put enter todo
      },
    });
    setInputTodo(""); // after add todo clear the input box
  };

  const handleUpdateTask = (id, todo) => {
    dispatch({
      type: UPDATE_TODO,

      id,
      todo, // just passes the id, and todo  here editiedText value use as todo value
    });
    setEditedTaskId(null);
  };
  const handleDeleteTask = (id) => {
    dispatch({
      type: DELETE_TODO,
      id,
    });
  };

  const handleEditTask = (task) => {
    setEditedTaskId(task.id);
    setEditedTask(task.todo);
  };

  return (
    <div>
      <h1>Todo App</h1>

      <input
        type="text"
        value={inputTodo}
        onChange={(e) => setInputTodo(e.target.value)}
        placeholder="Enter task"
      />
      <button onClick={handleAddTask}>Add Task</button>

      <ul>
        {state.map((task) => (
          <li key={task.id}>
            {task.id === editedTaskId ? (
              <>
                <input
                  type="text"
                  value={editedTask}
                  onChange={(e) => setEditedTask(e.target.value)}
                />
                <button onClick={() => handleUpdateTask(task.id, editedTask)}>
                  {" "}
                  {/* updated todo value as editiedTask passed to handleUdate */}
                  Save
                </button>
              </>
            ) : (
              <>
                {task.todo}
                <button onClick={() => handleEditTask(task)}>Edit</button>
                <button onClick={() => handleDeleteTask(task.id)}>
                  Delete
                </button>
              </>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
};

const mapStateToProps = (state) => ({
  tasks: state,
});

const mapDispatchToProps = {
  ADD_TODO,
  UPDATE_TODO,
  DELETE_TODO,
};

export default connect(mapStateToProps, mapDispatchToProps)(TodoApp);
